// Code generated by MockGen. DO NOT EDIT.
// Source: konzek-mid/repository (interfaces: TaskRepository)

// Package repository is a generated GoMock package.
package repository

import (
	models "konzek-mid/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// GetPastScheduledTasks mocks base method.
func (m *MockTaskRepository) GetPastScheduledTasks() ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastScheduledTasks")
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastScheduledTasks indicates an expected call of GetPastScheduledTasks.
func (mr *MockTaskRepositoryMockRecorder) GetPastScheduledTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastScheduledTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetPastScheduledTasks))
}

// GetTaskByID mocks base method.
func (m *MockTaskRepository) GetTaskByID(arg0 int) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", arg0)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskByID), arg0)
}

// InsertTask mocks base method.
func (m *MockTaskRepository) InsertTask(arg0 models.Task) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", arg0)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTask indicates an expected call of InsertTask.
func (mr *MockTaskRepositoryMockRecorder) InsertTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockTaskRepository)(nil).InsertTask), arg0)
}

// MarkTaskCompleted mocks base method.
func (m *MockTaskRepository) MarkTaskCompleted(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTaskCompleted indicates an expected call of MarkTaskCompleted.
func (mr *MockTaskRepositoryMockRecorder) MarkTaskCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskCompleted", reflect.TypeOf((*MockTaskRepository)(nil).MarkTaskCompleted), arg0)
}

// UpdateErrorTask mocks base method.
func (m *MockTaskRepository) UpdateErrorTask(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateErrorTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateErrorTask indicates an expected call of UpdateErrorTask.
func (mr *MockTaskRepositoryMockRecorder) UpdateErrorTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateErrorTask", reflect.TypeOf((*MockTaskRepository)(nil).UpdateErrorTask), arg0)
}
