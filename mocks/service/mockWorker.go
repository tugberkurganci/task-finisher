// Code generated by MockGen. DO NOT EDIT.
// Source: konzek-mid/service (interfaces: Worker)

// Package service is a generated GoMock package.
package service

import (
	models "konzek-mid/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWorker) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockWorkerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorker)(nil).Start))
}

// Stop mocks base method.
func (m *MockWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorker)(nil).Stop))
}

// completeTask mocks base method.
func (m *MockWorker) completeTask(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "completeTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// completeTask indicates an expected call of completeTask.
func (mr *MockWorkerMockRecorder) completeTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "completeTask", reflect.TypeOf((*MockWorker)(nil).completeTask), arg0)
}

// processWithRetry mocks base method.
func (m *MockWorker) processWithRetry(arg0 models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processWithRetry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// processWithRetry indicates an expected call of processWithRetry.
func (mr *MockWorkerMockRecorder) processWithRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processWithRetry", reflect.TypeOf((*MockWorker)(nil).processWithRetry), arg0)
}
